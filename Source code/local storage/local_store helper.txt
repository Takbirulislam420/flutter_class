import 'dart:io';

import 'package:path/path.dart';
import 'package:path_provider/path_provider.dart';
import 'package:sqflite/sqflite.dart';

class LdbHelper {
  LdbHelper._();

  static final LdbHelper getInstance = LdbHelper._();
  static const tableName = "note";
  static const columnNoteSno = "s_no";
  static const columnNoteTitle = "title";
  static const columnNoteDes = "des";

  Database? myDB;
  // db Open (path -> if exits then open else create db)

  Future<Database> getDB() async {
    myDB ??= await openDB();
    return myDB!;
    // if (myDB != null) {
    //   return myDB!;
    // } else {
    //   myDB = await openDB();
    //   return myDB!;
    // }
  }

  Future<Database> openDB() async {
    Directory directory = await getApplicationDocumentsDirectory();
    String dbPath = join(directory.path, "noteDB.db");
    return await openDatabase(dbPath, onCreate: (db, version) {
      // create all table here
      db.execute(
          "create table $tableName($columnNoteSno integer primary key autoincrement,$columnNoteTitle text,$columnNoteDes text)");
    }, version: 1);
  }

  //all queries
  //add data
  Future<bool> addNote({required String mTitle, required String mDes}) async {
    var db = await getDB();
    int rowsEffected = await db
        .insert(tableName, {columnNoteTitle: mTitle, columnNoteDes: mDes});
    return rowsEffected > 0;
  }

  //get data
  Future<List<Map<String, dynamic>>> getAllNotes() async {
    var db = await getDB();
    List<Map<String, dynamic>> mData = await db.query(tableName);
    return mData;
  }

  //update note
  Future<bool> updateNote(
      {required String mTitle, required String mDes, required int mSno}) async {
    var db = await getDB();
    int rowseffected = await db.update(
        tableName,
        {
          columnNoteTitle: mTitle,
          columnNoteDes: mDes,
        },
        where: "$columnNoteSno= $mSno");
    return rowseffected > 0;
  }

  // delete note
  Future<bool> deleteNote({required int sno}) async {
    var db = await getDB();
    int rowEffected = await db
        .delete(tableName, where: "$columnNoteSno=?", whereArgs: ['$sno']);
    return rowEffected > 0;
  }

  // find note
  Future<bool> findNote({required String mtitle}) async {
    var db = await getDB();
    int rowEffected = await db
        .delete(tableName, where: "$columnNoteTitle=?", whereArgs: [mtitle]);
    return rowEffected > 0;
  }
}
